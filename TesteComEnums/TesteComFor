using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

///Tipo de Enums
public class TiposDeEnums
{
	public enum Tipos
    {
		[Description("Construção 1")]
        numero1 = 1,

        [Description("Fundação 2")]
        numero2 = 2,

        [Description("Númeróó 3")]
        numero3 = 3,

        [Description("Númeróó 4")]
        numero4 = 4,
		
		[Description("Númeróó 5")]
        numero5 = 5,
	}
}

///Método de Extensão de Enums
///Método responsável por mostrar o nome da Descrição
public static class ExtensionTiposDeEnums
{
	public static string GetDescription(this Enum value)
    {
    	FieldInfo fi = value.GetType().GetField(value.ToString());
        DescriptionAttribute[] attributes = (DescriptionAttribute[])fi.GetCustomAttributes(typeof(DescriptionAttribute), false);

        if (attributes != null && attributes.Length > 0)
        	return attributes[0].Description;
		else
        	return value.ToString();
	}
}

public class Program
{
    public static void Main(string[] args)
    {
	    string Descricao = "";
        Descricao = TiposDeEnums.Tipos.numero1.GetDescription();
		Console.WriteLine("----------------------------------------------");
        Console.WriteLine("Essa é a descrição de um Enum: {0} ",Descricao);
		Console.WriteLine("----------------------------------------------");
		
		var qtdDeEnums = Enum.GetNames(typeof(TiposDeEnums.Tipos)).Length;
		
		Console.WriteLine("Essa é a descrição de todos Enum");
		Console.WriteLine();
		
		for(var i= 1; i <= qtdDeEnums; i++)
		{
			TiposDeEnums.Tipos item1 = (TiposDeEnums.Tipos)i;
			Console.WriteLine(item1.GetDescription());
		}
		Console.WriteLine("----------------------------------------------");
	}
}



